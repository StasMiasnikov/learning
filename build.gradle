def terraformWorkDir = 'Infra/src/config/terraform'

task clean {
    doLast {
        delete buildDir;
    }
}


task tfInit(type: Exec) {
    workingDir terraformWorkDir
    outputs.upToDateWhen { false }
    commandLine 'cmd', '/c', 'terraform init'
}
task tfRefresh(type: Exec) {
	dependsOn 'tfInit'
    workingDir terraformWorkDir
    outputs.upToDateWhen { false }
    commandLine 'cmd', '/c', 'terraform refresh'
}

task tfDestroy(type: Exec) {
    dependsOn 'tfRefresh'
    workingDir terraformWorkDir
    outputs.upToDateWhen { false }
    commandLine 'cmd', '/c', "terraform destroy --auto-approve"
}
task tfPlan(type: Exec) {
    dependsOn 'tfDestroy'
    workingDir terraformWorkDir
    outputs.upToDateWhen { false }
    commandLine 'cmd', '/c', "terraform plan"
}
task tfApply(type: Exec) {
    dependsOn 'tfPlan'
    workingDir terraformWorkDir
    outputs.upToDateWhen { false }
    commandLine 'cmd', '/c', "terraform apply --auto-approve"
}



task buildServer(type: Exec) {
    workingDir 'App/server'
    outputs.upToDateWhen { false }
    commandLine 'cmd', '/c', 'mvn clean package'
}


task buildClient(type: Exec) {
    workingDir 'App/client'
    outputs.upToDateWhen { false }
    commandLine 'cmd', '/c', 'npm install'
}


task execute() {
    dependsOn 'clean'
    dependsOn 'tfApply'
    dependsOn 'buildServer'
    dependsOn 'buildClient'
}
defaultTasks 'execute'